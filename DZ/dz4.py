# Дан список чисел. Создать список, в который попадают числа, описываемые возрастающую последовательность. 
# Пример: [1, 5, 2, 3, 4, 6, 1, 7] => [1, 2, 3] или [1, 7] или [1, 6, 7] и т.д. Порядок элементов менять нельзя
from unittest import TestLoader


list_in = [1, 5, 2, 3, 4, 6, 1, 7]
print(f'Входящий лист - {list_in}')
def split_list(li):
    lo = []
    length_li = len(li)
    for k in range(0,length_li):
        max = int(li[k])
        loi = []
        loi.append(str(li[k]))
        for i in range(k,length_li):
            if int(li[i]) > max:
                loi.append(str(li[i]))
                max = li[i]
        if len(loi) > 1: 
            lo.append(loi)
            a=loi
        min = int(li[-k])
        loi = []
        loi.append(str(li[-k]))
        for i in range(length_li-1-k,-1,-1):
            if li[i] < min:
                loi.insert(0,str(li[i]))
                min = li[i]
        if len(loi) > 1: 
            lo.append(loi)
            b = loi
        if k > 0 and k < length_li-1 and li[k-1] < li[k] and li[k] < li[k+1]:
            loi = a+b
            z = len(loi)-1
            while z >= 0:
                if loi.count(loi[z]) > 1:
                    loi.pop(z)
                z -= 1
            loi.sort()
            lo.append(loi)
    return lo
rezultat = split_list(list_in)
print(f'Возрастающие последовательности {rezultat}')



# Задача 3
max_len = len(rezultat[0])
for i in rezultat:
    
    if max_len < len(i):
        max_len = len(i)
        rez = i 
print(f'Масимальная по длине возрастающая последовательность {rez}')

# Создать и заполнить файл случайными целыми значениями. Выполнить сортировку содержимого файла по возрастанию. 







# Экстра-задачи:
# Давайте представим, что ваша компания только что наняла вашего друга из колледжа и заплатила вам реферальный бонус. Потрясающе! Чтобы отпраздновать, вы берете свою команду в очень странный бар по соседству и используете реферальный бонус, чтобы купить и построить самую большую трехмерную пирамиду из пивных банок, которую вы можете.
# Пирамида пивных банок будет квадратировать количество банок на каждом уровне - 1 банка на верхнем уровне, 4 на втором, 9 на следующем, 16, 25...
# Определите функцию beeramid, чтобы вернуть количество полных уровней пирамиды пивных банок, которую вы можете сделать, учитывая параметры: реферальный бонус и цена пивной банки.
# Например:
# beeramid(1500, 2)# 12
# beeramid(5000, 3)# 16

# Создать функцию, которая из списка чисел возвращает число, являющее суммой двух или нескольких других элементов, либо возвращающее None, если такого числа нет.
# 3. Вот вам файл с английскими именами. https://cloud.mail.ru/public/J7aq/iHnLspVJR
# Начните с сортировки в алфавитном порядке. Затем подсчитайте алфавитные значения каждого имени и умножьте это значение на порядковый номер имени в отсортированном списке для получения количества очков имени.

# Например, если список отсортирован по алфавиту, имя COLIN (алфавитное значение которого 3 + 15 + 12 + 9 + 14 = 53) является 938-м в списке. Поэтому, имя COLIN получает 938 × 53 = 49714 очков.

# Какова сумма очков имен в файле?